<?php

require __DIR__.'/../../vendor/autoload.php';

$app = require_once __DIR__.'/../../bootstrap/app.php';
$app->make(Illuminate\Contracts\Console\Kernel::class)->bootstrap();

use App\Services\CurrencyService;
use App\Models\Transaction;

echo "üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ—Å—Ç—ñ\n\n";

$currencyService = app(CurrencyService::class);

// 1. –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
echo "1Ô∏è‚É£  –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å—É–º:\n";
echo "   UAH: " . $currencyService->format(1500.50, 'UAH') . "\n";
echo "   USD: " . $currencyService->format(100, 'USD') . "\n";
echo "   PLN: " . $currencyService->format(250.75, 'PLN') . "\n\n";

// 2. –¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
echo "2Ô∏è‚É£  –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤–∞–ª—é—Ç (–∫—É—Ä—Å–∏ –ù–ë–£):\n";
try {
    $usdToUah = $currencyService->convert(100, 'USD', 'UAH');
    echo "   $100 USD = " . number_format($usdToUah, 2) . " UAH\n";
    
    $plnToUah = $currencyService->convert(100, 'PLN', 'UAH');
    echo "   100 PLN = " . number_format($plnToUah, 2) . " UAH\n";
    
    $usdToPln = $currencyService->convert(100, 'USD', 'PLN');
    echo "   $100 USD = " . number_format($usdToPln, 2) . " PLN\n\n";
} catch (Exception $e) {
    echo "   ‚ùå –ü–æ–º–∏–ª–∫–∞: " . $e->getMessage() . "\n\n";
}

// 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
echo "3Ô∏è‚É£  –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤ —Ä—ñ–∑–Ω–∏—Ö –≤–∞–ª—é—Ç–∞—Ö:\n";
$transactions = Transaction::with('category')->take(5)->get();

foreach ($transactions as $t) {
    echo "   ‚Ä¢ {$t->description}: {$t->formatted_amount} ({$t->category->name})\n";
}
echo "\n";

// 4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—É—Ä—Å—ñ–≤ —É –ë–î
echo "4Ô∏è‚É£  –ö—É—Ä—Å–∏ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö:\n";
$rates = DB::table('exchange_rates')
    ->orderBy('date', 'desc')
    ->take(6)
    ->get();

if ($rates->isEmpty()) {
    echo "   ‚ö†Ô∏è  –ö—É—Ä—Å–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ. –ó–∞–ø—É—Å—Ç—ñ—Ç—å: php artisan currency:update-rates\n\n";
} else {
    foreach ($rates as $rate) {
        echo "   {$rate->base_currency} ‚Üí {$rate->target_currency}: " . number_format($rate->rate, 6) . " ({$rate->date})\n";
    }
    echo "\n";
}

// 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
echo "5Ô∏è‚É£  –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n";
$totalsByCurrency = DB::table('transactions')
    ->select('currency', DB::raw('COUNT(*) as count'), DB::raw('SUM(amount) as total'))
    ->groupBy('currency')
    ->get();

foreach ($totalsByCurrency as $stat) {
    $symbol = $currencyService->getSymbol($stat->currency ?? 'UAH');
    echo "   {$stat->currency}: {$stat->count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –Ω–∞ —Å—É–º—É {$symbol}" . number_format($stat->total, 2) . "\n";
}

echo "\n‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n";
echo "\nüìñ –î–µ—Ç–∞–ª—å–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è: docs/multi-currency-guide.md\n";


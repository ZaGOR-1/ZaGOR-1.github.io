<?php

require __DIR__ . '/vendor/autoload.php';

$app = require_once __DIR__ . '/bootstrap/app.php';
$kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);
$kernel->bootstrap();

use App\Services\CurrencyService;

echo "üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—É—Ä—Å—ñ–≤ –≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ ExchangeRate-API\n";
echo str_repeat("=", 70) . "\n\n";

$service = app(CurrencyService::class);

// –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç
$currencies = array_keys($service->getSupportedCurrencies());

echo "üí± –í–∞–ª—é—Ç–∏: " . implode(', ', $currencies) . "\n\n";

// –û–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ –∫—É—Ä—Å–∏
echo "üì° –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É—Ä—Å—ñ–≤...\n";
echo str_repeat("-", 70) . "\n";

$results = $service->updateAllRates();

foreach ($results as $pair => $result) {
    if ($result['success']) {
        echo sprintf("‚úÖ %-15s = %10.6f\n", $pair, $result['rate']);
    } else {
        echo sprintf("‚ùå %-15s : %s\n", $pair, $result['error']);
    }
}

echo "\n" . str_repeat("-", 70) . "\n";

// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ë–î
$rates = DB::table('exchange_rates')
    ->where('date', date('Y-m-d'))
    ->get();

echo "\nüìä –ö—É—Ä—Å—ñ–≤ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: " . $rates->count() . "\n";

if ($rates->count() > 0) {
    echo "\nüìã –ó–±–µ—Ä–µ–∂–µ–Ω—ñ –∫—É—Ä—Å–∏:\n";
    foreach ($rates as $rate) {
        echo sprintf(
            "   %s -> %s = %.6f\n",
            $rate->base_currency,
            $rate->target_currency,
            $rate->rate
        );
    }
}

// –¢–µ—Å—Ç—É—î–º–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é
echo "\n" . str_repeat("=", 70) . "\n";
echo "üß™ –¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó:\n\n";

$tests = [
    ['amount' => 1000, 'from' => 'USD', 'to' => 'UAH'],
    ['amount' => 800, 'from' => 'PLN', 'to' => 'UAH'],
    ['amount' => 1000, 'from' => 'USD', 'to' => 'PLN'],
    ['amount' => 50000, 'from' => 'UAH', 'to' => 'USD'],
];

foreach ($tests as $test) {
    try {
        $result = $service->convert($test['amount'], $test['from'], $test['to']);
        echo sprintf(
            "   %s %s = %s %s\n",
            $service->format($test['amount'], $test['from']),
            $test['from'],
            $service->format($result, $test['to']),
            $test['to']
        );
    } catch (\Exception $e) {
        echo "   ‚ùå {$test['from']} -> {$test['to']}: " . $e->getMessage() . "\n";
    }
}

echo "\n‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n";


<?php

require __DIR__ . '/../../vendor/autoload.php';

$app = require_once __DIR__ . '/../../bootstrap/app.php';
$kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);
$kernel->bootstrap();

echo "üîç –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ExchangeRate-API\n";
echo str_repeat("=", 70) . "\n\n";

// –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ .env
echo "üìã –¢–µ—Å—Ç 1: –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è\n";
echo str_repeat("-", 70) . "\n";

$apiKey = env('EXCHANGERATE_API_KEY');
$provider = env('EXCHANGE_RATE_PROVIDER', 'nbu');

echo "API Key: " . ($apiKey ? substr($apiKey, 0, 10) . "..." : "‚ùå –í–Ü–î–°–£–¢–ù–Ü–ô") . "\n";
echo "Provider: {$provider}\n";
echo "Config API Key: " . (config('currencies.exchange_api.exchangerate_api_key') ? '‚úÖ' : '‚ùå') . "\n";
echo "Config Provider: " . config('currencies.exchange_api.provider', 'nbu') . "\n";

if (!$apiKey) {
    echo "\n‚ùå API –∫–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env!\n";
    echo "–î–æ–¥–∞–π—Ç–µ: EXCHANGERATE_API_KEY=e326cd9f57775c9455ff9ddb\n";
    exit(1);
}

if ($provider !== 'exchangerate-api') {
    echo "\n‚ö†Ô∏è  –£–í–ê–ì–ê: Provider –Ω–µ exchangerate-api, –∞ '{$provider}'!\n";
    echo "–ó–º—ñ–Ω—ñ—Ç—å –≤ .env: EXCHANGE_RATE_PROVIDER=exchangerate-api\n\n";
}

// –¢–µ—Å—Ç 2: –ü—Ä—è–º–∏–π –∑–∞–ø–∏—Ç –¥–æ API
echo "\nüì° –¢–µ—Å—Ç 2: –ü—Ä—è–º–∏–π –∑–∞–ø–∏—Ç –¥–æ API\n";
echo str_repeat("-", 70) . "\n";

try {
    $url = "https://v6.exchangerate-api.com/v6/{$apiKey}/pair/USD/UAH";
    echo "URL: {$url}\n\n";
    
    $response = \Illuminate\Support\Facades\Http::timeout(10)
        ->withOptions(['verify' => false]) // –î–ª—è Windows SSL
        ->get($url);
    
    if ($response->successful()) {
        $data = $response->json();
        
        if ($data['result'] === 'success') {
            echo "‚úÖ API –ø—Ä–∞—Ü—é—î!\n";
            echo "   –ö—É—Ä—Å USD‚ÜíUAH: {$data['conversion_rate']}\n";
            echo "   –û–Ω–æ–≤–ª–µ–Ω–æ: " . date('Y-m-d H:i:s', $data['time_last_update_unix']) . "\n";
        } else {
            echo "‚ùå API –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É\n";
            echo "   –¢–∏–ø: " . ($data['error-type'] ?? 'unknown') . "\n";
        }
    } else {
        echo "‚ùå HTTP –ø–æ–º–∏–ª–∫–∞: " . $response->status() . "\n";
        echo "   –í—ñ–¥–ø–æ–≤—ñ–¥—å: " . $response->body() . "\n";
    }
} catch (\Exception $e) {
    echo "‚ùå Exception: " . $e->getMessage() . "\n";
}

// –¢–µ—Å—Ç 3: CurrencyService
echo "\nüîß –¢–µ—Å—Ç 3: CurrencyService\n";
echo str_repeat("-", 70) . "\n";

try {
    $service = app(\App\Services\CurrencyService::class);
    
    // –û—á–∏—Å—Ç–∏–º–æ –∫–µ—à –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç—É
    $today = now()->format('Y-m-d');
    \Cache::forget("exchange_rate:USD:UAH:{$today}");
    
    echo "–í–∏–∫–ª–∏–∫–∞—î–º–æ convert(100, 'USD', 'UAH')...\n";
    $result = $service->convert(100, 'USD', 'UAH');
    
    echo "–†–µ–∑—É–ª—å—Ç–∞—Ç: {$result} UAH\n";
    
    if ($result == 100.0 || $result == 100) {
        echo "‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ö—É—Ä—Å 1:1 (fallback)!\n";
        echo "   API –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è, –ø—Ä–∞—Ü—é—î fallback\n";
    } else {
        echo "‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î (–Ω–µ fallback)\n";
    }
    
} catch (\Exception $e) {
    echo "‚ùå Exception: " . $e->getMessage() . "\n";
}

// –¢–µ—Å—Ç 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ë–î
echo "\nüíæ –¢–µ—Å—Ç 4: –ö—É—Ä—Å–∏ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö\n";
echo str_repeat("-", 70) . "\n";

$today = now()->format('Y-m-d');
$todayRates = DB::table('exchange_rates')
    ->where('date', $today)
    ->get();

if ($todayRates->isEmpty()) {
    echo "‚ùå –°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ—Ö –∫—É—Ä—Å—ñ–≤ –Ω–µ–º–∞—î –≤ –ë–î\n";
} else {
    echo "‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {$todayRates->count()} –∫—É—Ä—Å—ñ–≤ –∑–∞ {$today}:\n";
    foreach ($todayRates as $rate) {
        $isRealistic = $rate->rate > 1.1 || $rate->rate < 0.9; // –ù–µ 1:1
        $icon = $isRealistic ? '‚úÖ' : '‚ö†Ô∏è';
        echo "   {$icon} {$rate->base_currency}‚Üí{$rate->target_currency}: {$rate->rate}\n";
    }
}

// –¢–µ—Å—Ç 5: –ö–µ—à
echo "\nüóÑÔ∏è  –¢–µ—Å—Ç 5: –ö–µ—à –≤–∞–ª—é—Ç\n";
echo str_repeat("-", 70) . "\n";

$cacheKey = "exchange_rate:USD:UAH:{$today}";
$cached = \Cache::get($cacheKey);

if ($cached) {
    $isRealistic = $cached > 1.1 || $cached < 0.9;
    $icon = $isRealistic ? '‚úÖ' : '‚ö†Ô∏è';
    echo "{$icon} USD‚ÜíUAH –∑–∞–∫–µ—à–æ–≤–∞–Ω–æ: {$cached}\n";
    
    if (!$isRealistic) {
        echo "   ‚ö†Ô∏è  –ö—É—Ä—Å —Å—Ö–æ–∂–∏–π –Ω–∞ fallback 1:1\n";
        echo "   üí° –û—á–∏—Å—Ç—ñ—Ç—å –∫–µ—à: php artisan cache:clear\n";
    }
} else {
    echo "‚ùå –ö–µ—à –ø–æ—Ä–æ–∂–Ω—ñ–π –¥–ª—è USD‚ÜíUAH\n";
}

// –ü—ñ–¥—Å—É–º–æ–∫
echo "\n" . str_repeat("=", 70) . "\n";
echo "üìä –ü–Ü–î–°–£–ú–û–ö\n";
echo str_repeat("=", 70) . "\n";

$issues = [];

if (!$apiKey) {
    $issues[] = "API –∫–ª—é—á –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –≤ .env";
}

if ($provider !== 'exchangerate-api') {
    $issues[] = "Provider –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞ '{$provider}' –∑–∞–º—ñ—Å—Ç—å 'exchangerate-api'";
}

if ($todayRates->isEmpty()) {
    $issues[] = "–°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ—Ö –∫—É—Ä—Å—ñ–≤ –Ω–µ–º–∞—î –≤ –ë–î";
}

if (empty($issues)) {
    echo "‚úÖ –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω–æ!\n";
} else {
    echo "‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–∏:\n";
    foreach ($issues as $i => $issue) {
        echo "   " . ($i + 1) . ". {$issue}\n";
    }
    
    echo "\nüí° –†–Ü–®–ï–ù–ù–Ø:\n";
    echo "   1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ .env: EXCHANGE_RATE_PROVIDER=exchangerate-api\n";
    echo "   2. –û—á–∏—Å—Ç—ñ—Ç—å –∫–µ—à: php artisan config:clear && php artisan cache:clear\n";
    echo "   3. –û–Ω–æ–≤—ñ—Ç—å –∫—É—Ä—Å–∏: php artisan currency:update-rates\n";
}

echo "\n";

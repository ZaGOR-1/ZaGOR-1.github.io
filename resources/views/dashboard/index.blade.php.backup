@extends('layouts.app')

@section('title', '–î–∞—à–±–æ—Ä–¥')

@push('styles')
<style>
    .chart-container {
        position: relative !important;
        height: 280px !important;
        max-height: 280px !important;
        min-height: 280px !important;
        width: 100% !important;
        padding-bottom: 10px !important;
    }
    
    .chart-container canvas {
        max-width: 100% !important;
        max-height: 280px !important;
    }
    
    /* –ó–∞–ø–æ–±—ñ–≥—Ç–∏ —Ä–æ–∑—Ç—è–≥—É–≤–∞–Ω–Ω—é card */
    .card:has(.chart-container) {
        overflow: visible !important;
    }
    
    /* Period buttons */
    .period-btn {
        transition: all 0.2s ease;
    }
    
    .period-btn:not(.bg-blue-600) {
        color: #374151;
    }
    
    .dark .period-btn:not(.bg-blue-600) {
        color: #d1d5db;
    }
    
    .period-btn:not(.bg-blue-600):hover {
        background-color: #e5e7eb;
    }
    
    .dark .period-btn:not(.bg-blue-600):hover {
        background-color: #4b5563;
    }
    
    /* Currency buttons */
    .currency-btn {
        transition: all 0.2s ease;
    }
    
    .currency-btn:not(.bg-blue-600) {
        color: #374151;
    }
    
    .dark .currency-btn:not(.bg-blue-600) {
        color: #d1d5db;
    }
    
    .currency-btn:not(.bg-blue-600):hover {
        background-color: #e5e7eb;
    }
    
    .dark .currency-btn:not(.bg-blue-600):hover {
        background-color: #4b5563;
    }
</style>
@endpush

@section('content')
<div class="mb-6">
    <h1 class="text-3xl font-bold text-gray-900 dark:text-white">–î–∞—à–±–æ—Ä–¥</h1>
    <p class="text-gray-700 dark:text-gray-400 mt-1">–û–≥–ª—è–¥ –≤–∞—à–∏—Ö —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤</p>
</div>

<!-- KPI Cards -->
<div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6" id="kpi-cards">
    <!-- Income Card -->
    <div class="card border-l-4 border-green-600 bg-gradient-to-br from-gray-50 to-green-50 dark:from-gray-800 dark:to-gray-800">
        <div class="flex items-center justify-between">
            <div>
                <p class="text-sm font-semibold text-gray-700 dark:text-gray-400 uppercase tracking-wide">–î–æ—Ö–æ–¥–∏</p>
                <p class="text-2xl font-bold text-gray-900 dark:text-white mt-1" id="total-income">
                    <span class="loading">...</span>
                </p>
            </div>
            <div class="p-3 bg-green-100 dark:bg-green-900/50 rounded-xl shadow-sm">
                <svg class="w-8 h-8 text-green-700 dark:text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
            </div>
        </div>
    </div>

    <!-- Expenses Card -->
    <div class="card border-l-4 border-red-600 bg-gradient-to-br from-gray-50 to-red-50 dark:from-gray-800 dark:to-gray-800">
        <div class="flex items-center justify-between">
            <div>
                <p class="text-sm font-semibold text-gray-700 dark:text-gray-400 uppercase tracking-wide">–í–∏—Ç—Ä–∞—Ç–∏</p>
                <p class="text-2xl font-bold text-gray-900 dark:text-white mt-1" id="total-expense">
                    <span class="loading">...</span>
                </p>
            </div>
            <div class="p-3 bg-red-100 dark:bg-red-900/50 rounded-xl shadow-sm">
                <svg class="w-8 h-8 text-red-700 dark:text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"></path>
                </svg>
            </div>
        </div>
    </div>

    <!-- Balance Card -->
    <div class="card border-l-4 border-blue-600 bg-gradient-to-br from-gray-50 to-blue-50 dark:from-gray-800 dark:to-gray-800">
        <div class="flex items-center justify-between">
            <div>
                <p class="text-sm font-semibold text-gray-700 dark:text-gray-400 uppercase tracking-wide">–ë–∞–ª–∞–Ω—Å</p>
                <p class="text-2xl font-bold text-gray-900 dark:text-white mt-1" id="balance">
                    <span class="loading">...</span>
                </p>
            </div>
            <div class="p-3 bg-blue-100 dark:bg-blue-900/50 rounded-xl shadow-sm">
                <svg class="w-8 h-8 text-blue-700 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
            </div>
        </div>
    </div>
</div>

<!-- Charts Row -->
<div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
    <!-- Cashflow Chart -->
    <div class="card bg-gray-800" style="min-height: auto;">
        <div class="mb-4 pb-3 border-b border-gray-700">
            <div class="flex items-center justify-between mb-3">
                <h2 class="text-xl font-bold text-white">üìà Cashflow</h2>
                
                <!-- Period Selector -->
                <div class="flex gap-1 bg-gray-700 rounded-lg p-1">
                    <button onclick="changeCashflowPeriod('7d')" 
                            class="period-btn px-3 py-1 text-sm font-medium rounded-md transition-colors duration-200"
                            data-period="7d">
                        7–¥
                    </button>
                    <button onclick="changeCashflowPeriod('14d')" 
                            class="period-btn px-3 py-1 text-sm font-medium rounded-md transition-colors duration-200"
                            data-period="14d">
                        14–¥
                    </button>
                    <button onclick="changeCashflowPeriod('30d')" 
                            class="period-btn px-3 py-1 text-sm font-medium rounded-md transition-colors duration-200"
                            data-period="30d">
                        30–¥
                    </button>
                    <button onclick="changeCashflowPeriod('3m')" 
                            class="period-btn px-3 py-1 text-sm font-medium rounded-md transition-colors duration-200"
                            data-period="3m">
                        3–º
                    </button>
                    <button onclick="changeCashflowPeriod('6m')" 
                            class="period-btn px-3 py-1 text-sm font-medium rounded-md transition-colors duration-200 bg-blue-600 text-white"
                            data-period="6m">
                        6–º
                    </button>
                </div>
            </div>
            
            <!-- Currency Selector -->
            <div class="flex items-center gap-2">
                <span class="text-sm text-gray-400">–í–∞–ª—é—Ç–∞:</span>
                <div class="flex gap-1 bg-gray-700 rounded-lg p-1">
                    <button onclick="changeCashflowCurrency('UAH')" 
                            class="currency-btn px-3 py-1 text-sm font-medium rounded-md transition-colors duration-200 bg-blue-600 text-white"
                            data-currency="UAH">
                        ‚Ç¥ UAH
                    </button>
                    <button onclick="changeCashflowCurrency('USD')" 
                            class="currency-btn px-3 py-1 text-sm font-medium rounded-md transition-colors duration-200"
                            data-currency="USD">
                        $ USD
                    </button>
                    <button onclick="changeCashflowCurrency('PLN')" 
                            class="currency-btn px-3 py-1 text-sm font-medium rounded-md transition-colors duration-200"
                            data-currency="PLN">
                        z≈Ç PLN
                    </button>
                </div>
            </div>
        </div>
        
        <div class="chart-container">
            <canvas id="cashflowChart"></canvas>
        </div>
    </div>

    <!-- Category Breakdown Chart -->
    <div class="card bg-gray-800">
        <h2 class="text-xl font-bold text-white mb-4 pb-3 border-b border-gray-700">üìä –í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏</h2>
        <div class="chart-container">
            <canvas id="categoryChart"></canvas>
        </div>
    </div>
</div>

<!-- Top Categories -->
<div class="card bg-gray-800">
    <h2 class="text-xl font-bold text-white mb-4 pb-3 border-b border-gray-700">üèÜ –¢–æ–ø-5 –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –≤–∏—Ç—Ä–∞—Ç</h2>
    <div id="top-categories" class="space-y-3">
        <p class="text-gray-400">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</p>
    </div>
</div>

@push('scripts')
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Use session-based auth (no token needed for web routes)
    const headers = {
        'Accept': 'application/json',
        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content,
        'X-Requested-With': 'XMLHttpRequest'
    };
    
    // Fetch with timeout utility
    const fetchWithTimeout = (url, options, timeout = 5000) => {
        return Promise.race([
            fetch(url, options),
            new Promise((_, reject) => 
                setTimeout(() => reject(new Error('Timeout')), timeout)
            )
        ]);
    };
    
    // ============================================
    // –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ü–∞—Ä–∞–ª–µ–ª—å–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    // ============================================
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Ç–∏ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
    Promise.all([
        // 1. Overview (KPI)
        fetchWithTimeout('/api/v1/stats/overview', {
            headers: headers,
            credentials: 'same-origin'
        }).then(r => r.ok ? r.json() : null).catch(() => null),
        
        // 2. Cashflow data
        fetchWithTimeout('/api/v1/stats/cashflow?period=6m&currency=UAH', {
            headers: headers,
            credentials: 'same-origin'
        }).then(r => r.ok ? r.json() : null).catch(() => null),
        
        // 3. Category breakdown
        fetchWithTimeout('/api/v1/stats/category-breakdown?type=expense', {
            headers: headers,
            credentials: 'same-origin'
        }).then(r => r.ok ? r.json() : null).catch(() => null)
    ])
    .then(([overviewData, cashflowData, categoryData]) => {
        // –û–±—Ä–æ–±–∫–∞ Overview
        if (overviewData && overviewData.success) {
            updateOverview(overviewData.data);
        } else {
            showOverviewError();
        }
        
        // –û–±—Ä–æ–±–∫–∞ Cashflow (lazy load chart)
        if (cashflowData && cashflowData.success) {
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Intersection Observer –¥–ª—è lazy loading –≥—Ä–∞—Ñ—ñ–∫–∞
            lazyLoadCashflowChart(cashflowData.data);
        } else {
            showCashflowError();
        }
        
        // –û–±—Ä–æ–±–∫–∞ Category Chart (lazy load)
        if (categoryData && categoryData.success) {
            lazyLoadCategoryChart(categoryData.data);
        } else {
            showCategoryError();
        }
    })
    .catch(err => {
        console.error('Error loading dashboard data:', err);
        showOverviewError();
        showCashflowError();
        showCategoryError();
    });
    
    // ============================================
    // –§—É–Ω–∫—Ü—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI
    // ============================================
    
    function updateOverview(stats) {
        const currencySymbols = {
            'UAH': '‚Ç¥',
            'USD': '$',
            'PLN': 'z≈Ç',
            'EUR': '‚Ç¨'
        };
        const currencySymbol = currencySymbols[stats.currency] || stats.currency;
        
        document.getElementById('total-income').textContent = `${currencySymbol}${stats.total_income.toLocaleString('uk-UA', {minimumFractionDigits: 2})}`;
        document.getElementById('total-expense').textContent = `${currencySymbol}${stats.total_expense.toLocaleString('uk-UA', {minimumFractionDigits: 2})}`;
        document.getElementById('balance').textContent = `${currencySymbol}${stats.balance.toLocaleString('uk-UA', {minimumFractionDigits: 2})}`;
        
        // Top categories
        if (stats.top_expense_categories && stats.top_expense_categories.length > 0) {
            const topCategoriesHtml = stats.top_expense_categories.map(cat => `
                <div class="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                    <div class="flex items-center space-x-3">
                        <div class="w-3 h-3 rounded-full" style="background-color: ${cat.category_color}"></div>
                        <span class="font-medium text-gray-900 dark:text-white">${cat.category_name}</span>
                    </div>
                    <span class="text-gray-900 dark:text-white font-semibold">${currencySymbol}${cat.total.toLocaleString('uk-UA', {minimumFractionDigits: 2})}</span>
                </div>
            `).join('');
            document.getElementById('top-categories').innerHTML = topCategoriesHtml;
        } else {
            document.getElementById('top-categories').innerHTML = '<p class="text-gray-400">–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤–∏—Ç—Ä–∞—Ç–∏</p>';
        }
    }
    
    function showOverviewError() {
        document.getElementById('total-income').innerHTML = '<span class="text-red-500 text-sm">–ü–æ–º–∏–ª–∫–∞</span>';
        document.getElementById('total-expense').innerHTML = '<span class="text-red-500 text-sm">–ü–æ–º–∏–ª–∫–∞</span>';
        document.getElementById('balance').innerHTML = '<span class="text-red-500 text-sm">–ü–æ–º–∏–ª–∫–∞</span>';
        document.getElementById('top-categories').innerHTML = '<p class="text-red-400">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö</p>';
    }
    
    function showCashflowError() {
        const container = document.getElementById('cashflowChart')?.parentElement?.parentElement;
        if (container) {
            container.innerHTML = '<p class="text-gray-400 text-center py-8">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è cashflow</p>';
        }
    }
    
    function showCategoryError() {
        const container = document.getElementById('categoryChart')?.parentElement?.parentElement;
        if (container) {
            container.innerHTML = '<p class="text-gray-400 text-center py-8">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π</p>';
        }
    }
    
    // ============================================
    // –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: Lazy Loading –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
    // ============================================
    
    let chartJsLoaded = false;
    let cashflowChart = null;
    let categoryChart = null;
    let currentPeriod = '6m';
    let currentCurrency = 'UAH';
    
    // Lazy load Chart.js —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    async function ensureChartJsLoaded() {
        if (chartJsLoaded) return;
        
        return new Promise((resolve, reject) => {
            if (window.Chart) {
                chartJsLoaded = true;
                resolve();
                return;
            }
            
            // Chart.js –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —á–µ—Ä–µ–∑ CDN –≤ layout
            const checkInterval = setInterval(() => {
                if (window.Chart) {
                    clearInterval(checkInterval);
                    chartJsLoaded = true;
                    resolve();
                }
            }, 50);
            
            // Timeout –ø—ñ—Å–ª—è 3 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                clearInterval(checkInterval);
                if (!chartJsLoaded) {
                    reject(new Error('Chart.js failed to load'));
                }
            }, 3000);
        });
    }
    
    // Lazy load cashflow chart –∑ Intersection Observer
    function lazyLoadCashflowChart(data) {
        const chartElement = document.getElementById('cashflowChart');
        if (!chartElement) return;
        
        const observer = new IntersectionObserver(async (entries) => {
            if (entries[0].isIntersecting) {
                observer.disconnect();
                
                try {
                    await ensureChartJsLoaded();
                    renderCashflowChart(data);
                } catch (err) {
                    console.error('Error loading Chart.js:', err);
                    showCashflowError();
                }
            }
        }, {
            rootMargin: '100px' // –ü–æ—á–∞—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞ 100px –¥–æ –≤–∏–¥–∏–º–æ—Å—Ç—ñ
        });
        
        observer.observe(chartElement);
    }
    
    // Lazy load category chart –∑ Intersection Observer
    function lazyLoadCategoryChart(data) {
        const chartElement = document.getElementById('categoryChart');
        if (!chartElement) return;
        
        const observer = new IntersectionObserver(async (entries) => {
            if (entries[0].isIntersecting) {
                observer.disconnect();
                
                try {
                    await ensureChartJsLoaded();
                    renderCategoryChart(data);
                } catch (err) {
                    console.error('Error loading Chart.js:', err);
                    showCategoryError();
                }
            }
        }, {
            rootMargin: '100px'
        });
        
        observer.observe(chartElement);
    }
    
    // ============================================
    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
    // ============================================
    
    function renderCashflowChart(data) {
        const ctx = document.getElementById('cashflowChart');
        if (!ctx) return;
        
        if (cashflowChart) {
            cashflowChart.destroy();
        }
        
        const chartData = data.data;
        const currency = data.currency;
        
        cashflowChart = new Chart(ctx, {
        if (!response) return null;
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        if (!data) {
            // Timeout –∞–±–æ —ñ–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞
            document.getElementById('total-income').innerHTML = '<span class="text-red-500">–ü–æ–º–∏–ª–∫–∞</span>';
            document.getElementById('total-expense').innerHTML = '<span class="text-red-500">–ü–æ–º–∏–ª–∫–∞</span>';
            document.getElementById('balance').innerHTML = '<span class="text-red-500">–ü–æ–º–∏–ª–∫–∞</span>';
            document.getElementById('top-categories').innerHTML = '<p class="text-red-500 dark:text-red-400">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö</p>';
            return;
        }
        
        if (data.success) {
            const stats = data.data;
            // –û—Ç—Ä–∏–º—É—î–º–æ —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç–∏
            const currencySymbols = {
                'UAH': '‚Ç¥',
                'USD': '$',
                'PLN': 'z≈Ç'
            };
            const currencySymbol = currencySymbols[stats.currency] || stats.currency;
            
            document.getElementById('total-income').textContent = `${currencySymbol}${stats.total_income.toLocaleString('uk-UA', {minimumFractionDigits: 2})}`;
            document.getElementById('total-expense').textContent = `${currencySymbol}${stats.total_expense.toLocaleString('uk-UA', {minimumFractionDigits: 2})}`;
            document.getElementById('balance').textContent = `${currencySymbol}${stats.balance.toLocaleString('uk-UA', {minimumFractionDigits: 2})}`;
            
            // Top categories
            if (stats.top_expense_categories && stats.top_expense_categories.length > 0) {
                const topCategoriesHtml = stats.top_expense_categories.map(cat => `
                    <div class="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                        <div class="flex items-center space-x-3">
                            <div class="w-3 h-3 rounded-full" style="background-color: ${cat.category_color}"></div>
                            <span class="font-medium text-gray-900 dark:text-white">${cat.category_name}</span>
                        </div>
                        <span class="text-gray-900 dark:text-white font-semibold">${currencySymbol}${cat.total.toLocaleString('uk-UA', {minimumFractionDigits: 2})}</span>
                    </div>
                `).join('');
                document.getElementById('top-categories').innerHTML = topCategoriesHtml;
            } else {
                document.getElementById('top-categories').innerHTML = '<p class="text-gray-400">–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤–∏—Ç—Ä–∞—Ç–∏</p>';
            }
        } else {
            console.error('API returned error:', data.message);
            document.getElementById('total-income').textContent = '‚Ç¥0.00';
            document.getElementById('total-expense').textContent = '‚Ç¥0.00';
            document.getElementById('balance').textContent = '‚Ç¥0.00';
            document.getElementById('top-categories').innerHTML = '<p class="text-gray-400">–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö</p>';
        }
    })
    .catch(err => {
        console.error('Error fetching overview:', err);
        document.getElementById('total-income').innerHTML = '<span class="text-red-500 text-sm">–ü–æ–º–∏–ª–∫–∞</span>';
        document.getElementById('total-expense').innerHTML = '<span class="text-red-500 text-sm">–ü–æ–º–∏–ª–∫–∞</span>';
        document.getElementById('balance').innerHTML = '<span class="text-red-500 text-sm">–ü–æ–º–∏–ª–∫–∞</span>';
        document.getElementById('top-categories').innerHTML = '<p class="text-red-400">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12)</p>';
    });

    // Global variable for cashflow chart
    let cashflowChart = null;
    let currentPeriod = '6m';
    let currentCurrency = 'UAH';

    // Function to load cashflow data
    function loadCashflowData(period = '6m', currency = null) {
        currentPeriod = period;
        if (currency) {
            currentCurrency = currency;
        }
        
        const url = `/api/v1/stats/cashflow?period=${period}${currency ? '&currency=' + currency : ''}`;
        
        fetch(url, {
            headers: headers,
            credentials: 'same-origin'
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            console.log('Cashflow API response:', data);
            
            if (data.success) {
                const cashflow = data.data.cashflow;
                const currency = data.data.currency || 'UAH';
                const ctx = document.getElementById('cashflowChart');
                
                console.log('Cashflow data points:', cashflow.length);
                console.log('Currency:', currency);
                
                if (!ctx) {
                    console.error('Canvas element not found!');
                    return;
                }
                
                // Currency symbols mapping
                const currencySymbols = {
                    'UAH': '‚Ç¥',
                    'USD': '$',
                    'PLN': 'z≈Ç',
                    'EUR': '‚Ç¨'
                };
                
                const currencySymbol = currencySymbols[currency] || currency;
                
                // Destroy old chart if exists
                if (cashflowChart) {
                    console.log('Destroying old chart...');
                    cashflowChart.destroy();
                    cashflowChart = null;
                }
                
                console.log('Creating new chart...');
                
                // Log data for debugging
                console.log('Labels:', cashflow.map(item => item.period));
                console.log('Income data:', cashflow.map(item => item.income));
                console.log('Expense data:', cashflow.map(item => item.expense));
                
                // Create new chart
                cashflowChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: cashflow.map(item => item.period),
                        datasets: [
                            {
                                label: '–î–æ—Ö–æ–¥–∏',
                                data: cashflow.map(item => item.income),
                                borderColor: 'rgb(34, 197, 94)',
                                backgroundColor: 'rgba(34, 197, 94, 0.1)',
                                tension: 0.4,
                                fill: true
                            },
                            {
                                label: '–í–∏—Ç—Ä–∞—Ç–∏',
                                data: cashflow.map(item => item.expense),
                                borderColor: 'rgb(239, 68, 68)',
                                backgroundColor: 'rgba(239, 68, 68, 0.1)',
                                tension: 0.4,
                                fill: true
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        animation: {
                            duration: 750,
                            easing: 'easeInOutQuart'
                        },
                        layout: {
                            padding: {
                                top: 5,
                                bottom: 15,
                                left: 5,
                                right: 5
                            }
                        },
                        plugins: {
                            title: {
                                display: true,
                                text: `Cashflow (${currencySymbol})`,
                                color: '#f9fafb',
                                font: {
                                    size: 16,
                                    weight: 'bold'
                                },
                                padding: {
                                    bottom: 10
                                }
                            },
                            legend: {
                                labels: {
                                    color: '#f9fafb',
                                    font: {
                                        size: 14,
                                        weight: '600'
                                    },
                                    padding: 10
                                }
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                grace: '5%',
                                ticks: {
                                    color: '#9ca3af',
                                    callback: function(value) {
                                        return value.toLocaleString('uk-UA') + ' ' + currencySymbol;
                                    }
                                },
                                grid: {
                                    color: '#374151'
                                }
                            },
                            x: {
                                ticks: {
                                    color: '#9ca3af'
                                },
                                grid: {
                                    color: '#374151'
                                }
                            }
                        }
                    }
                });
                
                console.log('Chart created successfully!');
            } else {
                console.error('API returned success=false:', data.message);
                const container = document.getElementById('cashflowChart').parentElement.parentElement;
                container.innerHTML = '<p class="text-gray-400 text-center py-8">–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è</p>';
            }
        })
        .catch(err => {
            console.error('Error fetching cashflow:', err);
            const container = document.getElementById('cashflowChart').parentElement.parentElement;
            container.innerHTML = '<p class="text-red-400 text-center py-8">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö</p>';
        });
    }
    
    // Function to change period
    window.changeCashflowPeriod = function(period) {
        // Update button styles
        document.querySelectorAll('.period-btn').forEach(btn => {
            if (btn.dataset.period === period) {
                btn.classList.add('bg-blue-600', 'text-white');
                btn.classList.remove('text-gray-300', 'hover:bg-gray-600');
            } else {
                btn.classList.remove('bg-blue-600', 'text-white');
                btn.classList.add('text-gray-300', 'hover:bg-gray-600');
            }
        });
        
        // Load new data
        loadCashflowData(period, currentCurrency);
    };
    
    // Function to change currency
    window.changeCashflowCurrency = function(currency) {
        currentCurrency = currency;
        
        // Update button styles
        document.querySelectorAll('.currency-btn').forEach(btn => {
            if (btn.dataset.currency === currency) {
                btn.classList.add('bg-blue-600', 'text-white');
                btn.classList.remove('text-gray-300', 'hover:bg-gray-600');
            } else {
                btn.classList.remove('bg-blue-600', 'text-white');
                btn.classList.add('text-gray-300', 'hover:bg-gray-600');
            }
        });
        
        // Load new data
        loadCashflowData(currentPeriod, currency);
    };
    
    // Initial load
    loadCashflowData('6m', 'UAH');

    // Fetch Category Breakdown
    fetch('/api/v1/stats/category-breakdown', {
        headers: headers,
        credentials: 'same-origin'
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            const breakdown = data.data.breakdown;
            const ctx = document.getElementById('categoryChart');
            
            if (breakdown.length === 0) {
                const container = ctx.parentElement.parentElement;
                container.innerHTML = '<p class="text-gray-400 text-center py-8">–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è</p>';
                return;
            }
            
            new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: breakdown.map(item => item.category_name),
                    datasets: [{
                        data: breakdown.map(item => item.total),
                        backgroundColor: breakdown.map(item => item.category_color),
                        borderWidth: 2,
                        borderColor: '#1f2937'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                color: '#f9fafb',
                                padding: 15,
                                font: {
                                    size: 14,
                                    weight: '600'
                                }
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.parsed || 0;
                                    const percentage = breakdown[context.dataIndex].percentage;
                                    return `${label}: ‚Ç¥${value.toLocaleString('uk-UA', {minimumFractionDigits: 2})} (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
        } else {
            console.error('Failed to load category breakdown:', data.message);
            const container = document.getElementById('categoryChart').parentElement.parentElement;
            container.innerHTML = '<p class="text-gray-400 text-center py-8">–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è</p>';
        }
    })
    .catch(err => {
        console.error('Error fetching category breakdown:', err);
        const container = document.getElementById('categoryChart').parentElement.parentElement;
        container.innerHTML = '<p class="text-red-400 text-center py-8">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö</p>';
    });
});
</script>
@endpush

@endsection

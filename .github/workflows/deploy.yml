name: CD - Deploy to Production

on:
  push:
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–µ—Ç–∫–∞ 'develop',
    # –∏–Ω–∞—á–µ –≤–∞—à 'deploy-staging' –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
    branches: [ main, develop ]
    tags:
      - 'v*'

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create .env.production file
        run: echo "${{ secrets.ENV_PRODUCTION }}" > .env.production

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë—ã–ª–∞ –æ–ø–µ—á–∞—Ç–∫–∞ DOCKER_USERNAME
          # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å DOCKERHUB_USERNAME, –∫–∞–∫ –≤ —à–∞–≥–µ Login
          images: ${{ secrets.DOCKERHUB_USERNAME }}/finance-tracker
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    # –≠—Ç–æ —É—Å–ª–æ–≤–∏–µ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å,
    # —Ç.–∫. –º—ã –¥–æ–±–∞–≤–∏–ª–∏ 'develop' –≤ —Ç—Ä–∏–≥–≥–µ—Ä 'on:'
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.finance-tracker.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /var/www/finance-tracker
            docker-compose pull
            docker-compose up -d
            docker-compose exec -T app php artisan migrate --force
            docker-compose exec -T app php artisan config:cache
            docker-compose exec -T app php artisan route:cache
            docker-compose exec -T app php artisan view:cache

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://finance-tracker.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.0
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω env –¥–ª—è $DB_PASSWORD,
        # –∏–Ω–∞—á–µ —Å–∫—Ä–∏–ø—Ç –±—ç–∫–∞–ø–∞ —É–ø–∞–¥–µ—Ç —Å –æ—à–∏–±–∫–æ–π
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /var/www/finance-tracker
            
            # Backup database
            # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è $DB_PASSWORD —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–∞ –∏–∑ env
            docker-compose exec -T db mysqldump -u root -p$DB_PASSWORD finance_tracker > backup_$(date +%Y%m%d_%H%M%S).sql
            
            # Pull new images
            docker-compose pull
            
            # Zero-downtime deployment
            docker-compose up -d --no-deps --scale app=2 app
            sleep 10
            docker-compose up -d --no-deps --remove-orphans app
            
            # Run migrations
            docker-compose exec -T app php artisan migrate --force
            
            # Clear caches
            docker-compose exec -T app php artisan config:cache
            docker-compose exec -T app php artisan route:cache
            docker-compose exec -T app php artisan view:cache
            docker-compose exec -T app php artisan optimize
            
            # Restart queue workers
            docker-compose restart queue
            
            # Health check
            sleep 5
            curl -f https://finance-tracker.com/health || exit 1

      - name: Notify on success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "üöÄ Production deployment successful!",
              attachments: [{
                color: 'good',
                text: `Version: ${{ github.ref_name }}\nCommit: ${{ github.sha }}`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "‚ùå Production deployment failed!",
              attachments: [{
                color: 'danger',
                text: `Version: ${{ github.ref_name }}\nCommit: ${{ github.sha }}`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

<?php

require __DIR__ . '/../../vendor/autoload.php';
$app = require_once __DIR__ . '/../../bootstrap/app.php';
$app->make(Illuminate\Contracts\Console\Kernel::class)->bootstrap();

use App\Models\Transaction;
use App\Models\User;
use App\Services\CurrencyService;

echo "üîç –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º–∏ –∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—î—é $1000\n\n";

// 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
echo "1Ô∏è‚É£  –û—Å—Ç–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è:\n";
$lastTransaction = Transaction::with('category')->latest()->first();

if ($lastTransaction) {
    echo "   ID: {$lastTransaction->id}\n";
    echo "   –°—É–º–∞: {$lastTransaction->amount} {$lastTransaction->currency}\n";
    echo "   –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {$lastTransaction->category->name} ({$lastTransaction->category->type})\n";
    echo "   –î–∞—Ç–∞: {$lastTransaction->transaction_date}\n";
    echo "   –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {$lastTransaction->user_id}\n\n";
} else {
    echo "   ‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –Ω–µ–º–∞—î!\n\n";
    exit;
}

// 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
$user = User::find($lastTransaction->user_id);
echo "2Ô∏è‚É£  –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {$user->name}\n";
echo "   –ë–∞–∑–æ–≤–∞ –≤–∞–ª—é—Ç–∞: {$user->default_currency}\n\n";

// 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—É—Ä—Å USD->UAH
echo "3Ô∏è‚É£  –ö—É—Ä—Å –≤–∞–ª—é—Ç:\n";
$currencyService = app(CurrencyService::class);

try {
    $rate = DB::table('exchange_rates')
        ->where('base_currency', 'USD')
        ->where('target_currency', 'UAH')
        ->where('date', now()->format('Y-m-d'))
        ->first();
    
    if ($rate) {
        echo "   USD -> UAH: {$rate->rate} (–¥–∞—Ç–∞: {$rate->date})\n";
        $convertedAmount = 1000 * $rate->rate;
        echo "   $1000 USD = " . number_format($convertedAmount, 2) . " UAH\n\n";
    } else {
        echo "   ‚ö†Ô∏è  –ö—É—Ä—Å USD->UAH –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î!\n";
        echo "   –°–ø—Ä–æ–±—É—é –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ API –ù–ë–£...\n";
        
        $converted = $currencyService->convert(1000, 'USD', 'UAH');
        echo "   $1000 USD = " . number_format($converted, 2) . " UAH\n\n";
    }
} catch (Exception $e) {
    echo "   ‚ùå –ü–æ–º–∏–ª–∫–∞: {$e->getMessage()}\n\n";
}

// 4. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ StatsService
echo "4Ô∏è‚É£  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞:\n";
$statsService = app(\App\Services\StatsService::class);

try {
    $stats = $statsService->getOverview($user->id);
    
    echo "   –í–∞–ª—é—Ç–∞ –¥–∞—à–±–æ—Ä–¥–∞: {$stats['currency']}\n";
    echo "   –î–æ—Ö–æ–¥–∏: " . number_format($stats['total_income'], 2) . " {$stats['currency']}\n";
    echo "   –í–∏—Ç—Ä–∞—Ç–∏: " . number_format($stats['total_expense'], 2) . " {$stats['currency']}\n";
    echo "   –ë–∞–ª–∞–Ω—Å: " . number_format($stats['balance'], 2) . " {$stats['currency']}\n";
    echo "   –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: {$stats['transactions_count']}\n\n";
} catch (Exception $e) {
    echo "   ‚ùå –ü–æ–º–∏–ª–∫–∞ StatsService: {$e->getMessage()}\n\n";
}

// 5. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ –¥–æ—Ö–æ–¥–∏ –≤ USD
echo "5Ô∏è‚É£  –í—Å—ñ –¥–æ—Ö–æ–¥–∏ –≤ USD:\n";
$usdIncomes = Transaction::whereHas('category', function($q) {
    $q->where('type', 'income');
})
->where('currency', 'USD')
->where('user_id', $user->id)
->get();

if ($usdIncomes->count() > 0) {
    $totalUsd = 0;
    foreach ($usdIncomes as $income) {
        echo "   ‚Ä¢ {$income->description}: \${$income->amount} ({$income->transaction_date->format('d.m.Y H:i')})\n";
        $totalUsd += $income->amount;
    }
    echo "   –í—Å—å–æ–≥–æ: \${$totalUsd}\n\n";
} else {
    echo "   ‚ö†Ô∏è  –ù–µ–º–∞—î –¥–æ—Ö–æ–¥—ñ–≤ –≤ USD!\n\n";
}

// 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
echo "6Ô∏è‚É£  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:\n";

if (!$rate) {
    echo "   ‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –ö—É—Ä—Å–∏ –≤–∞–ª—é—Ç –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω—ñ!\n";
    echo "   –†–Ü–®–ï–ù–ù–Ø: –ó–∞–ø—É—Å—Ç—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É:\n";
    echo "      php update-currency-rates.php\n\n";
}

if ($lastTransaction->currency === 'USD' && $lastTransaction->category->type === 'income') {
    echo "   ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ\n";
    echo "   üí° –Ø–∫—â–æ –¥–∞—à–±–æ—Ä–¥ –Ω–µ –æ–Ω–æ–≤–∏–≤—Å—è - –æ–Ω–æ–≤—ñ—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫—É (F5 –∞–±–æ Ctrl+R)\n";
}

echo "\nüîÑ –ü—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—É—Ä—Å—ñ–≤ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –¥–∞—à–±–æ—Ä–¥!\n";

